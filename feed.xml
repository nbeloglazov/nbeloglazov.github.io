<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nbeloglazov blog</title>
    <description>Quil, Clojure and programming in general</description>		
    <link>http://nbeloglazov.com</link>
    <atom:link href="http://nbeloglazov.com/feed.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started with Self-Hosted ClojureScript. Part 1.</title>
      <description>&lt;p&gt;ClojureScript is a compiler for Clojure that targets JavaScript. About &lt;a href=&quot;https://groups.google.com/forum/#!searchin/clojurescript/1.7.28/clojurescript/Z6xD9UthbvQ/gsLMbURGAgAJ&quot;&gt;7 months ago&lt;/a&gt; it got a nice feature that allows you to compile ClojureScript code using ClojureScript: self-hosting. That means that we can now compile ClojureScript fully in browser! That&amp;#39;s pretty cool for creating various interactive in-browser tutorials/repls/workspaces/whatever. I&amp;#39;ve been working on compiling Quil using self-hosted cljs (including macros) and decided to write basic tutorial of how to work with self-hosted cljs. This tutorial uses vanilla cljs without any additional libraries or features like reading files from disk, sending XHR so all you need is to understand basic ClojureScript syntax.&lt;/p&gt;

&lt;h3&gt;Prepare&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s start with creating a basic cljs project.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/nbeloglazov/blog-projects.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blog-projects/self-hosted-cljs
lein cljsbuild auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open &lt;code&gt;index.html&lt;/code&gt; in your browser. Alternatively you can create or reuse any existing cljs project your have.&lt;/p&gt;

&lt;h3&gt;Your first compile&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s start with standard &amp;quot;Hello, world&amp;quot;. If you cloned my project the code is already there:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my.main&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cljs.js&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cjs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cljs.pprint&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enable-console-print!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cjs/empty-state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cjs/eval-str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;(.log js/console \&amp;quot;Hello, world\&amp;quot;)&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;bla&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cjs/js-eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;nv&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload the page and you should see &amp;quot;Hello, world&amp;quot; in console. So let&amp;#39;s see what&amp;#39;s going on here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Require &lt;code&gt;cljs.js&lt;/code&gt; namespace. That namespace contains all self-hosting-related functions.&lt;/li&gt;
&lt;li&gt;Define &lt;code&gt;state&lt;/code&gt; variable that is initialized with empty state. Tbh I don&amp;#39;t know what state can contain so I usually pass empty state to all eval/compile functions.&lt;/li&gt;
&lt;li&gt;Calling &lt;code&gt;eval-str&lt;/code&gt; to eval cljs code. It takes quite a few of arguments. But the important ones for us here is second (source) and fourth (opts) arguments. Other are &amp;quot;default&amp;quot; and we can ignore them for now. If curious - check &lt;a href=&quot;https://github.com/cljsinfo/cljs-api-docs/blob/catalog/refs/cljs.js/eval-str.md&quot;&gt;docs&lt;/a&gt; to see what each argument is. In options map we provide a function that is used to evaluated compiled js. Cljs compiler doesn&amp;#39;t have default eval function so we have to provide it explicitly all the time. If you take a look at &lt;a href=&quot;https://github.com/cljsinfo/cljs-api-docs/blob/catalog/refs/cljs.js/js-eval.md&quot;&gt;&lt;code&gt;js-eval&lt;/code&gt;&lt;/a&gt; function you&amp;#39;ll see that it is plain old javascript &lt;code&gt;eval()&lt;/code&gt; (as name implies), no magic here.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Evaluation is good, but it would be more interesting to see compiled code before it is evaluated. It helps to understand how it works and makes it easier to debug. To see compiled code of &lt;code&gt;eval-str&lt;/code&gt; we&amp;#39;ll be using &lt;code&gt;compile-str&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cjs/compile-str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;(.log js/console \&amp;quot;Hello, world\&amp;quot;)&amp;quot;&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;bla&amp;quot;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cjs/js-eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And output in logs:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last (fifth) argument is changed from &lt;code&gt;identity&lt;/code&gt; to &lt;code&gt;#(println (:value %))&lt;/code&gt;. This argument is a callback function that will be invoked once cljs finished compiling. The result will be passed to the provided callback. In the first example with &lt;code&gt;eval-str&lt;/code&gt; we didn&amp;#39;t really care about the result, we just wanted &lt;code&gt;console.log&lt;/code&gt; to be evaluated. But now we use &lt;code&gt;compile-str&lt;/code&gt; and we want to see result of compilation, so we pass a function that takes that result and prints it to console.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s compile real namespace with multiple functions. Also I&amp;#39;m going to introduce helper &lt;code&gt;compile&lt;/code&gt; function to omit default arguments:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cjs/compile-str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bla&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  (ns my.test)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  (defn triple [x] (* x 3))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  (triple 5)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cjs/js-eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And result is following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;goog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;provide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;my.test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;goog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cljs.core&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;triple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;my$test$triple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;triple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compiled code readable and you can pretty easily relate cljs source with compiled js. It has some &lt;code&gt;goog.provide&lt;/code&gt; and &lt;code&gt;goog.require&lt;/code&gt; magic which comes from Google Closure compiler used by ClojureScript, but it is quite simple: compiled code declares namespace &lt;code&gt;my.test&lt;/code&gt; and uses namespace &lt;code&gt;cljs.core&lt;/code&gt;. Everything else is standard javascript.&lt;/p&gt;

&lt;p&gt;Thats all for now. Now we can compile basic cljs namespaces. In the next article we&amp;#39;ll be compiling code consisting from multiple namespaces/files and using macros.&lt;/p&gt;
</description>
      <pubDate>Sat, 05 Mar 2016 00:00:00 -0800</pubDate>
      <link>http://nbeloglazov.com/2016/03/05/getting-started-with-self-hosted-cljs-part-1.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2016/03/05/getting-started-with-self-hosted-cljs-part-1.html</guid>
    </item>
    
    <item>
      <title>Live Reloading in Quil Cljs</title>
      <description>&lt;p&gt;Quil supported live reloading since forever and it has been one of its coolest features. But only in Clojure. ClojureScript version lacked the support until now. Latest Quil release (2.2.6) fixes the problem. Now if you use plugins for live coding in ClojureScript such as &lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;figwheel&lt;/a&gt; - you&amp;#39;ll be able to reload Quil functions (draw, update, key handlers) on fly without reloading the browser. Here is 3 steps instructions how to do it:&lt;/p&gt;

&lt;p&gt;1 Create new Quil cljs project: &lt;code&gt;lein new quil-cljs hello&lt;/code&gt; and go to &lt;code&gt;hello&lt;/code&gt; folder.&lt;br&gt;
2 Setup figwheel in &lt;code&gt;project.clj&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lein-cljsbuild&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0.6&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lein-figwheel&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.3.3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:cljsbuild&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:builds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:source-paths&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                          &lt;span class=&quot;ss&quot;&gt;:figwheel&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;
                          &lt;span class=&quot;ss&quot;&gt;:compiler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3 Start figwheel: &lt;code&gt;lein figwheel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all. Now open &lt;code&gt;index.html&lt;/code&gt; and you should see a ball rotating around the center of the sketch. When you update &lt;code&gt;core.clj&lt;/code&gt; and save it - the updates will be reflected in the browser. For example change rotation direction by modifying &lt;code&gt;update&lt;/code&gt; function: replace plus with minus: &lt;code&gt;(- (:angle state) 0.1)&lt;/code&gt; and save it. The ball will start rotating in counter-clockwise direction.&lt;/p&gt;

&lt;p&gt;Auto-reloading is supported only in &lt;code&gt;defsketch&lt;/code&gt;. If you use &lt;code&gt;sketch&lt;/code&gt; function - it won&amp;#39;t work (the same as in Clojure version). When &lt;code&gt;defsketch&lt;/code&gt; macro is used, all functions (draw, update, etc) are wrapped into anonymous functions so they&amp;#39;re called by name rather than by value. This allows for reloading to work: when &lt;code&gt;hello.core/draw&lt;/code&gt; is reloaded by figwheel, quil will call the anonymous function wrapper which in turn calls &lt;code&gt;hello.core/draw&lt;/code&gt;. It adds some overhead so use &lt;code&gt;sketch&lt;/code&gt; instead of &lt;code&gt;defsketch&lt;/code&gt; in &amp;quot;production&amp;quot;.&lt;/p&gt;
</description>
      <pubDate>Mon, 15 Jun 2015 00:00:00 -0700</pubDate>
      <link>http://nbeloglazov.com/2015/06/15/live-reloading-in-quil-cljs.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2015/06/15/live-reloading-in-quil-cljs.html</guid>
    </item>
    
    <item>
      <title>Trees, Quil and Random</title>
      <description>&lt;p&gt;&lt;img src=&quot;/images/trees/tree-0694.png&quot; style=&quot;display: block; margin: auto;&quot; alt=&quot;First tree&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Last week I&amp;#39;ve been playing with random tree generation in Quil. Idea is simple: generate a tree that resembles a real tree and doesn&amp;#39;t make you think that it was generated by computer. Suprisingly it&amp;#39;s not that hard to do. Tree is represented as a collection of branches. A branch consists of 3 components: start point, angle (from 0 to 2π) and length. Each branch can have 0, 1 or 2 sub-branches. Algorithm for generating sub-branches from a branch:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each branch can have up to 2 sub-branches. Probability of each sub-branch is 90%.&lt;/li&gt;
&lt;li&gt;For each sub-ranch start point is calculated as end point of parent branch.&lt;/li&gt;
&lt;li&gt;Sub-branch lengths are randomly selected from [0.7L, 1.0L], where L is parent&amp;#39;s length.&lt;/li&gt;
&lt;li&gt;Sub-branch angles are randomly selected from [α-¼π, α+¼π], where α is parent&amp;#39;s angle.&lt;/li&gt;
&lt;li&gt;Add sub-branches to the tree.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, having the function for generating sub-branches, tree generation is easy:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create root: the first branch with angle ½π.&lt;/li&gt;
&lt;li&gt;Branch-off each branch on previous level.&lt;/li&gt;
&lt;li&gt;Repeat step 2 as many times as needed. My trees have 14 levels.&lt;/li&gt;
&lt;li&gt;Concat all levels into single collection and draw them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Last part is especially easy to do in clojure and each step corresponds to one line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;generate-tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;root &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;levels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iterate &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcat &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;branch-off&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;levels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it. Now more trees!&lt;/p&gt;

&lt;div style=&quot;display: flex; flex-wrap: wrap; justify-content: space-around;&quot;&gt;
  &lt;img src=&quot;/images/trees/tree-3649.png&quot; style=&quot;margin: 5px 0px;&quot; alt=&quot;Tree&quot;/&gt;
  &lt;img src=&quot;/images/trees/tree-5551.png&quot; style=&quot;margin: 5px 0px;&quot; alt=&quot;Tree&quot;/&gt;
  &lt;img src=&quot;/images/trees/tree-6173.png&quot; style=&quot;margin: 5px 0px;&quot; alt=&quot;Tree&quot;/&gt;
  &lt;img src=&quot;/images/trees/tree-16160.png&quot; style=&quot;margin: 5px 0px;&quot; alt=&quot;Tree&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;White trees on black background look especially cool:&lt;/p&gt;

&lt;div style=&quot;display: flex; flex-wrap: wrap; justify-content: space-around;&quot;&gt;
  &lt;img src=&quot;/images/trees/tree-0890.png&quot; style=&quot;margin: 5px 0px;&quot; alt=&quot;Tree&quot;/&gt;
  &lt;img src=&quot;/images/trees/tree-4042.png&quot; style=&quot;margin: 5px 0px;&quot; alt=&quot;Tree&quot;/&gt;
  &lt;img src=&quot;/images/trees/tree-4509.png&quot; style=&quot;margin: 5px 0px;&quot; alt=&quot;Tree&quot;/&gt;
  &lt;img src=&quot;/images/trees/tree-5177.png&quot; style=&quot;margin: 5px 0px;&quot; alt=&quot;Tree&quot;/&gt;
&lt;/div&gt;

&lt;h3&gt;Quil tips&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve shown only static images of trees, but in reality they&amp;#39;re animated so you can see how tree grows from a single root to a full tree with thousands of branches.&lt;/p&gt;

&lt;p&gt;Initially I used a simple approach and was redrawing all branches on each frame. It works well when you have small number of branches but tree with 14 levels has 7000-10000 branches and drawing 10000 elements on each frame is well... slow. FPS drops from 60 to 10. So I optimized it a little, removed clearing background and changed &lt;code&gt;draw-branch&lt;/code&gt; function to skip branches that are already fully drawn. That helped drastically bringing FPS back to 60. The big drawback that you can&amp;#39;t do nice transformations now that may require redrawing everything. For example after tree is drawn I wanted to zoom into smallest branch and start drawing new tree from that branch, but it requires redrawing everything during zoom and I gave up this idea.&lt;/p&gt;

&lt;p&gt;Another trick I did is around fading background color into tree color (see animations below). The idea is that screen background gradually turns to the same color as tree essentially clearing the tree. To achieve this the tree is drawn on a separate &lt;a href=&quot;http://quil.info/api/image/rendering#create-graphics&quot;&gt;graphics&lt;/a&gt; object. Graphics object is transparent and when you copy it to main screen you can see background. With this technique &lt;code&gt;draw&lt;/code&gt; function looks like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; Clear screen using calculated background screen. Background depends&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; on tree state: if tree is fully drawn it gradually changes to match the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; tree color.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;q/background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate-background-color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;; Draw active branches on graphics object. Note that we don&amp;#39;t erase&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; existing branches, draw-tree only draws active branches. &lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;q/with-graphics&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:buffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw-tree&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;; Copy buffer graphics to main screen.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;q/image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:buffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally endless trees:&lt;/p&gt;

&lt;script src=&quot;/scripts/trees.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;canvas id=&quot;tree&quot;/&gt;&lt;/p&gt;

&lt;script&gt;
  (function() {
    var width = document.querySelector(&quot;.post&quot;).offsetWidth;
    var height = 0.7 * width;
    trees.start_tree(&quot;tree&quot;, [width, height]);
  })();
&lt;/script&gt;

&lt;p&gt;Controls (tree must have focus):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;r - regenerate tree;&lt;/li&gt;
&lt;li&gt;up/down - change number of levels;&lt;/li&gt;
&lt;li&gt;i - toggle stats;&lt;/li&gt;
&lt;li&gt;s - save as image (opens in new tab);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find source code on &lt;a href=&quot;https://github.com/nbeloglazov/blog-projects/tree/master/trees&quot;&gt;GitHub&lt;/a&gt; or try it online on &lt;a href=&quot;http://quil.info/sketches/show/example_tree&quot;&gt;quil.info&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Mon, 18 May 2015 00:00:00 -0700</pubDate>
      <link>http://nbeloglazov.com/2015/05/18/trees-quil-and-random.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2015/05/18/trees-quil-and-random.html</guid>
    </item>
    
    <item>
      <title>Mongo Backup Using Clojure</title>
      <description>&lt;p&gt;In this post I&amp;#39;ll show a simple tool that creates Mongo backup and uploads it to &lt;a href=&quot;https://cloud.google.com/storage/&quot;&gt;Google Cloud Storage&lt;/a&gt;. Suppose you have a small webproject that uses mongo. The project runs on a single machine on some cloud provider. And you want to have periodic mongo backups. Potentially you can achieve it using features of your provider like disk snapshots, but it may require shutting down the machine or unmounting disk and it feels heavy and not fun. Instead we&amp;#39;ll create our own tool that periodically creates backups and uploads them to a file hosting service like Dropbox or Google Drive or (in my case) Google Cloud Storage. I use Google Cloud Storage because I&amp;#39;m already using &lt;a href=&quot;https://cloud.google.com/&quot;&gt;Google Cloud Platform&lt;/a&gt; as hosting for &lt;a href=&quot;http://hatnik.com&quot;&gt;Hatnik&lt;/a&gt; so why not to use available services?&lt;/p&gt;

&lt;p&gt;The tool is relatively small and consists of 2 parts: backup creation and uploading.&lt;/p&gt;

&lt;h3&gt;Create backup&lt;/h3&gt;

&lt;p&gt;Assumptions: mongo instance doesn&amp;#39;t require authentication and OS is linux.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;clojure.java&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with-sh-dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]])&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;clean&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Removes old dump from current folder if exists.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;rm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-r&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dump&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;rm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dump.zip&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;create-dump&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Creates dump and pack it into dump.zip file in current folder.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;mongodump&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;zip&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-r&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dump.zip&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dump&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;archive-name&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Generates name for dump file. That&amp;#39;s how it will be saved in Cloud Storage.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.text.SimpleDateFormat.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;yyyy-MM-dd_kk-mm&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java.util.Date.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.zip&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see it is pretty trivial. We use &lt;code&gt;mongodump&lt;/code&gt; utility for creating dump from running mongo instance. Mongo &lt;a href=&quot;http://docs.mongodb.org/manual/core/backups/#backup-with-mongodump&quot;&gt;docs&lt;/a&gt; say that it should be used only for small deployments as it hurts performance.&lt;/p&gt;

&lt;h3&gt;Uploading to cloud&lt;/h3&gt;

&lt;p&gt;Now we&amp;#39;re going to jump through Google API hoops in order to upload single zip file. First of all you should setup &lt;a href=&quot;https://cloud.google.com/storage/docs/authentication#service_accounts&quot;&gt;service account&lt;/a&gt; that will allow the tool to upload to the storage. It will generate an email address and private key that will be used for authentication. Now let&amp;#39;s go to code. To simplify things we will be using official java library for working with Google Cloud Storage (&lt;a href=&quot;https://developers.google.com/resources/api-libraries/documentation/storage/v1/java/latest/&quot;&gt;javadocs&lt;/a&gt;). In the code I omit all imports as there are quite a few of them and you can get them from github project at the end of the post.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;email-address&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;YOUR SERVICE ACCOUNT EMAIL HERE&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;p12-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;PATH TO PRIVATE KEY FILE&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bucket-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;mongo-backups&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;YOUR GOOGLE CLOUD PROJECT NAME&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; not sure if it&amp;#39;s actually needed&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;authorize&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Authorizes app and returns credentials object that will be used to&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  create storage object.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.. &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GoogleCredential$Builder.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setTransport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GoogleNetHttpTransport/newTrustedTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setJsonFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;JacksonFactory/getDefaultInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setServiceAccountId&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;email-address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setServiceAccountScopes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StorageScopes/DEVSTORAGE_FULL_CONTROL&lt;/span&gt;
                                &lt;span class=&quot;nv&quot;&gt;StorageScopes/DEVSTORAGE_READ_ONLY&lt;/span&gt;
                                &lt;span class=&quot;nv&quot;&gt;StorageScopes/DEVSTORAGE_READ_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setServiceAccountPrivateKeyFromP12File&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p12-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-storage&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Authorizes and creates storage object.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.. &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Storage$Builder.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;http-transport&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;json-factory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setApplicationName&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;upload-zip-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zip-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doto &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StorageObject.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.setName&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.setContentType&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/zip&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FileContent.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/zip&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zip-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.. &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;client&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bucket-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally glue both parts together:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;create-and-upload-dump&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with-sh-dir&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create-dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upload-zip-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;archive-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/tmp/dump.zip&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; main method needed to run the tool from command line&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;-main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create-and-upload-dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s all. You can test the tool by executing &lt;code&gt;create-and-upload-dump&lt;/code&gt; function from repl.&lt;/p&gt;

&lt;h3&gt;Create cron job&lt;/h3&gt;

&lt;p&gt;Now we can generate executable jar using &lt;code&gt;lein uberjar&lt;/code&gt;, copy it to some directory on the server together with private key file and create daily cron job by creating script in &lt;code&gt;/etc/cron.daily&lt;/code&gt; folder. My cron job looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Daily mongo backups&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;WORKING_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/nbeloglazov/backup
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$WORKING_DIR&lt;/span&gt;
java -jar &lt;span class=&quot;nv&quot;&gt;$WORKING_DIR&lt;/span&gt;/backup.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I suspect that if Dropbox or something else is used instead of Google Cloud Storage then code should be simpler. Authentication in Google APIs is kinda messy and it&amp;#39;s not easy to find correct combination and order of methods to call to make it work.&lt;/p&gt;

&lt;p&gt;For reference here is a complete working version of the tool: &lt;a href=&quot;https://github.com/nbeloglazov/hatnik/tree/master/tools/backup&quot;&gt;project on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Mon, 15 Dec 2014 00:00:00 -0800</pubDate>
      <link>http://nbeloglazov.com/2014/12/15/backup-mongodb-using-clojure.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2014/12/15/backup-mongodb-using-clojure.html</guid>
    </item>
    
    <item>
      <title>GitHub Actions in Hatnik</title>
      <description>&lt;p&gt;&lt;a href=&quot;http://hatnik.com&quot;&gt;Hatnik&lt;/a&gt; is a tool that allows you to track library releases: you want to know when new version of ClojureScript released - you go to Hatnik, setup an action and next time ClojureScript released the action will be performed. Initially only email action was supported. Happy to announce that now we support GitHub Issue and Pull Request actions.&lt;/p&gt;

&lt;h3&gt;Issue Action&lt;/h3&gt;

&lt;p&gt;This action is pretty trivial: create an issue in selected repo when library is released. You can customize repo (obviously), issue title and body. Title and body support template variables: for example &amp;quot;{{library}} {{version}} released&amp;quot; will be rendered as &amp;quot;org.clojure/clojurescript 0.0-2371 released&amp;quot;.&lt;/p&gt;

&lt;p&gt;Issue action might be useful, for example, for library maintainers. Usually there are quite a few tasks you need to do when you release new version: update wiki, tutorials, some post-release testing. It is quite easy to forget something so Issue action can help with that: for each task create an issue and then later you or someone else can pick it up and do whatever needed to be done.&lt;/p&gt;

&lt;h3&gt;Pull Request Action&lt;/h3&gt;

&lt;p&gt;Pull Request action modifies public repo and opens pull request. Each modification operation is a find-and-replace operation and consists of 3 fields: file to be modified, regex and replacement. Regex and replacement fields support template variables.&lt;/p&gt;

&lt;p&gt;Pull request can be used to keep dependencies of you project up-to-date: just create an action that updates version of dependency X in &lt;code&gt;project.clj&lt;/code&gt; each time X is released. It is especially cool when you have CI (e.g. &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis&lt;/a&gt;) that runs tests on pull requests: you can immediately see if new version breaks your application and if it doesn&amp;#39;t break - simply merge it. To keep your application up-to-date you need just one click! Another use case is for library maintainers: usually library README includes latest version of the library so users can simply copy-paste it to &lt;code&gt;project.clj&lt;/code&gt; and start using it. But these versions sometime become out-of-date as maintainers forget to update README. Pull Request action can help with that. For example I set up a few actions for Quil that update versions in README, examples and lein templates. Here is an &lt;a href=&quot;https://github.com/quil/quil-templates/pull/4&quot;&gt;example&lt;/a&gt; of such pull request. Final note about pull requests - if pull request action doesn&amp;#39;t change anything in repo (for example file moved or version in README has been already updated) - you&amp;#39;ll get an email that describes why Hatnik couldn&amp;#39;t open a pull request.&lt;/p&gt;

&lt;h3&gt;TODO&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Import build files. Currently Hatnik doesn&amp;#39;t provide options to import build files like &lt;code&gt;project.clj&lt;/code&gt;. So if a project has a lot of dependencies it becomes tiring to create actions for each dependency one by one. Hatnik should support import capabilites.&lt;/li&gt;
&lt;li&gt;Allow to use temporary accounts to create restricted set of actions and decide whether to use Hatnik or not. Currently you have to login via GitHub in order to try it out.&lt;/li&gt;
&lt;li&gt;Support more languages. Currently only maven-compatible libraries are supported (Java, Clojure, Scala, Groovy). We should support more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Contributing&lt;/h3&gt;

&lt;p&gt;Hatnik is an open source project. Take a look at the &lt;a href=&quot;https://github.com/nbeloglazov/hatnik&quot;&gt;repo&lt;/a&gt;. Bug reports and pull requests are very welcome!&lt;/p&gt;
</description>
      <pubDate>Mon, 24 Nov 2014 00:00:00 -0800</pubDate>
      <link>http://nbeloglazov.com/2014/11/24/github-actions-in-hatnik.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2014/11/24/github-actions-in-hatnik.html</guid>
    </item>
    
    <item>
      <title>Introducing Hatnik</title>
      <description>&lt;p&gt;Yet another blog post about a ClojureCup 2014 project. But this time from me. About Hatnik!&lt;/p&gt;

&lt;h3&gt;Don&amp;#39;t miss a release&lt;/h3&gt;

&lt;p&gt;Hatnik is a web app we created during ClojureCup weekend. It can notify you about new library releases (currently via email only). It supports Clojure/Maven libraries which are hosted on Clojars or Maven Central. How to use it: sign in, create an action in which you specify which library you want to watch and template for the email and that&amp;#39;s all. Next the library is released we&amp;#39;ll send you an email. Try it out: &lt;a href=&quot;http://hatnik.clojurecup.com&quot;&gt;hatnik.clojurecup.com&lt;/a&gt;. If you don&amp;#39;t like signing in unfamiliar websites which you might never visit again, here is a screenshots-demonstration:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
Initial page after you logged in&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hatnik/hatnik_0.png&quot; alt=&quot;Initial page&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
Create new action&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hatnik/hatnik_1.png&quot; alt=&quot;Create new action&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
Action created&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hatnik/hatnik_2.png&quot; alt=&quot;The action created&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
Libraries used by Hatnik&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hatnik/hatnik_3.png&quot; alt=&quot;All libraries&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can also group actions to projects. Projects is just a named group of actions. Each user by default has &amp;quot;Default&amp;quot; project (see screenshots) so you might ignore it.&lt;/p&gt;

&lt;h3&gt;Future plans&lt;/h3&gt;

&lt;p&gt;We did the project over 2 days so obviously there are a lot of things to improve.&lt;/p&gt;

&lt;h4&gt;More actions&lt;/h4&gt;

&lt;p&gt;Currently Hatnik supports only email notifications. We&amp;#39;re planning to add more. Here is the initial list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Noop - does nothing. Might be useful for creating dashboard-like project that simply displays latest versions.&lt;/li&gt;
&lt;li&gt;GitHub Issue - creates an issue on GitHub repo.&lt;/li&gt;
&lt;li&gt;GitHub Wiki Page - changes GitHub wiki page using simple find-and-replace mechanism.&lt;/li&gt;
&lt;li&gt;GitHub Pull Request - creates pull request that modifies some files using find-and-replace mechanism.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Cleanup&lt;/h4&gt;

&lt;p&gt;We developed Hatnik in hurry so there is some technical debt.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improve web client. We used Om for the web client but we didn&amp;#39;t know it good enough so in some places code is not Om-like at all. For example we spend few hours at the end of the contest trying to fix a bug, which made library textfield read-only. Looks like the bug is described in &lt;a href=&quot;https://github.com/swannodette/om/wiki/Basic-Tutorial#dealing-with-text-input-fields&quot;&gt;tutorial&lt;/a&gt;, but even using the tutorial we couldn&amp;#39;t make it work. So we ended up with horrible hack that sets value to textfield using &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add more validation. Currently REST API is not strict, it does very little validation. It should do more. We&amp;#39;re looking at Prismatic &lt;a href=&quot;https://github.com/Prismatic/schema&quot;&gt;schema&lt;/a&gt; for that.&lt;/li&gt;
&lt;li&gt;Add core.typed. At work I&amp;#39;m using Google Closure Compiler quite heaviliy. Among other features it introduces type system to JavaScript. It makes much easier to write correct code. So I&amp;#39;d like to try core.typed for same reasons and see whether it helps or not me.&lt;/li&gt;
&lt;li&gt;Add tests. Currently we have some DB tests. We should add integration-like tests for API and ideally sending emails, creating github issues. Tests for client side would be nice, may be something WebDriver-based.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Other plans&lt;/h4&gt;

&lt;p&gt;Hatnik currently supports only maven-compatible libraries. Nothing stops it from supporting libraries from other languages/platforms, like Ruby, JavaScript, Python. I think most tools in other languages also use HTTP for downloading libraries from central repository, so it should be pretty easy to implement in Clojure.&lt;/p&gt;

&lt;p&gt;Currently all actions have to be created manually one by one. It would be cool to be able to provide a link to &lt;code&gt;project.clj&lt;/code&gt; and it will be parsed automatically. Again, nothing prevents us from supporting other projects files like &lt;code&gt;pom.xml&lt;/code&gt;, &lt;code&gt;build.sbt&lt;/code&gt;, &lt;code&gt;Gemfile&lt;/code&gt;. Some of them just harder to parse as they&amp;#39;re written in DSL, but still, should be fun task to do.&lt;/p&gt;

&lt;h3&gt;Afterwords&lt;/h3&gt;

&lt;p&gt;Few words about the project name. Hatnik is a house spirit in Slavic folklore. There are different versions of what he does and whether he good or not, but in my environment Hatnik is a good grandpa-looking-like spirit which helps with household. So we wanted the app to do the same - help with some simple tasks which help to keep project dependencies or documentation in order. I hope it will be useful for you. If you liked Hatnik you can &lt;a href=&quot;https://clojurecup.com/#/apps/hatnik&quot;&gt;vote for us&lt;/a&gt;. Also have a look at &lt;a href=&quot;https://clojurecup.com/#/apps&quot;&gt;other projects&lt;/a&gt;, they&amp;#39;re pretty interesting. And they also needs votes ;)&lt;/p&gt;

&lt;p&gt;Hatnik is open-sourced and here is &lt;a href=&quot;https://github.com/nbeloglazov/hatnik&quot;&gt;GitHub Repo&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Wed, 01 Oct 2014 00:00:00 -0700</pubDate>
      <link>http://nbeloglazov.com/2014/10/01/introducing-hatnik.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2014/10/01/introducing-hatnik.html</guid>
    </item>
    
    <item>
      <title>Halfway Through ClojureCup</title>
      <description>&lt;h3&gt;Hatnik&lt;/h3&gt;

&lt;p&gt;As you might have guessed, this year I&amp;#39;m participating in &lt;a href=&quot;http://clojurecup.com&quot;&gt;ClojureCup&lt;/a&gt;. We (&lt;a href=&quot;https://github.com/nbeloglazov&quot;&gt;me&lt;/a&gt; and &lt;a href=&quot;https://github.com/norgat&quot;&gt;Maksim&lt;/a&gt;) are working on a project called Hatnik. It&amp;#39;s a web app which aims to help you to track library releases. The idea is pretty simple: setup actions to be performed once some library is released. An action consists of 2 parts: library to watch and an instruction to perform. Example: send email to &lt;code&gt;me@nbeloglazov.com&lt;/code&gt; when &lt;code&gt;org.clojure/clojurescript&lt;/code&gt; releases. It is somewhat similar to &lt;a href=&quot;https://ifttt.com/&quot;&gt;IFTTT&lt;/a&gt; (but more specialized) and pretty similar to &lt;a href=&quot;https://www.artifact-listener.org/&quot;&gt;Artifact Listener&lt;/a&gt; (but obviously cooler!). We have plans to support following actions: email, github issue, github pull request, change wiki on github. Initially we&amp;#39;re going to support only email and add others if we have enough time during the contest.
&lt;br&gt;&lt;br&gt;
Organizers provided quite a few additional services like private github repo, a server for hosting app, CI servers, error-tracking utility, team chat and some other stuff. We&amp;#39;ve been using only few of them: github repo, server for hosting app and Flowdock for communication: it has integration with github and trello so we can see everything that happens in repo or task list in realtime. Though other services looked intersting I felt we&amp;#39;d spent too much time setting them up instead of working on the project.&lt;/p&gt;

&lt;h3&gt;Architecture&lt;/h3&gt;

&lt;p&gt;The app consists of 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web client - that&amp;#39;s what user sees and interacts with.&lt;/li&gt;
&lt;li&gt;Web server - provides API for web client and stores data to DB.&lt;/li&gt;
&lt;li&gt;Worker server - periodically checks versions of all registered libraries and performs actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I work on servers while Maksim works on the web client. For the web client we decided to use ClojureScript + Om and Twitter Bootstrap for fancy styling. Server side libraries are pretty standard: ring, compojure, monger and few other libs for emails, github api, and other stuff. You can find more details about the project in &lt;a href=&quot;https://docs.google.com/document/d/1-Ad0h22qkmLARB7T8TfokJYonOlPZzZ-cuDzz6tW7hU/edit?usp=sharing&quot;&gt;design doc&lt;/a&gt; which we prepared beforehand so we can concentrate on coding!&lt;/p&gt;

&lt;h3&gt;What we have so far&lt;/h3&gt;

&lt;p&gt;I would say we have quite enough:&lt;/p&gt;

&lt;h4&gt;Web client&lt;/h4&gt;

&lt;p&gt;Client can load and display projects together with actions. You can add new projects. What&amp;#39;s left to do: actions adding/modifying, login (everything is ready, only need to add buttons), nice &amp;quot;About&amp;quot; page that describes how to use Hatnik.&lt;/p&gt;

&lt;h4&gt;Web server&lt;/h4&gt;

&lt;p&gt;Web server is mostly done. REST API is implemented, everything is stored in DB. DB is represented as a protocol that has 2 implementations: in-memory and mongo. It might be overkill but I found it&amp;#39;s quite useful to be able to run everything in memory. I even had time to add tests for DB! I used &lt;a href=&quot;https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en&quot;&gt;Postman&lt;/a&gt; for testing REST API. It is quite cool as it allows you to save requests and reuse them later. I probably should have added some tests for REST instead but due to the time limit I decided to go with Postman: it is easier to setup and use.&lt;/p&gt;

&lt;h4&gt;Worker server&lt;/h4&gt;

&lt;p&gt;Currently worker server can only submit emails on user request: when you create an action you have an option to test it, the test request is sent to the worker server to perform the action. What&amp;#39;s left to do: add logic for checking versions of all registered libraries and perform actions for updated libraries, invoke this logic periodically.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I&amp;#39;m having a lot of fun! I don&amp;#39;t remember when I wrote so much code last time. Lately I&amp;#39;ve been coding less at work so ClojureCup came just in time. Especially when you have an excuse to not write tons of tests and just code for the sake of coding. If you&amp;#39;re interested in what we have so far - check our &lt;a href=&quot;https://github.com/clojurecup2014/hatnik/&quot;&gt;github repo&lt;/a&gt;. And of course check out our app when the contest is over.&lt;/p&gt;
</description>
      <pubDate>Sat, 27 Sep 2014 00:00:00 -0700</pubDate>
      <link>http://nbeloglazov.com/2014/09/27/halfway-through-clojurecup.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2014/09/27/halfway-through-clojurecup.html</guid>
    </item>
    
    <item>
      <title>Clojure Google Summer of Code Results</title>
      <description>&lt;p&gt;Google Summer of Code is over and here is a summary of great work Clojure students have done this summer!&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Student: Aleksandr Sorokoumov&lt;br&gt;
Project: &lt;a href=&quot;http://www.google-melange.com/gsoc/project/details/google/gsoc2014/gerrrr/5693417237512192&quot;&gt;Incanter and core.matrix integration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I introduced core.matrix as a martix backend for Incanter, instead of clatrix (one of the core.matrix backends). This resulted in a possibility to choose the most appropriate matrix backend for the particular project and transparently switch between them if necessary. Besides, Incanter dataset implementation was replaced by core.matrix one. Due to this, most of the dataset functions are available through core.matrix without a need to install Incanter. More details about Incanter changes can be found in &lt;a href=&quot;https://github.com/incanter/incanter/wiki/Incanter-2.0-change-log&quot;&gt;change log&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Student: Alexander Yakushev&lt;br&gt;
Project: &lt;a href=&quot;http://www.google-melange.com/gsoc/project/details/google/gsoc2014/unlogic/5732278101606400&quot;&gt;Lean Clojure/JVM runtime&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;During this summer I modified Clojure compiler in a separate branch to produce lean bytecode where all Var objects are replaced with static fields of the namespace class. This simultaneously decreased the time required to load the compiled namespace, the memory footprint of that namespace in memory and the added time cost of dereferencing a var each time it is used. The patched compiler also doesn&amp;#39;t emit the bytecode for macros (as they are used only during the macroexpansion and are not needed in runtime) and intelligently elides metadata (so that it is used during compilation but then is not emitted). Some of the observations and thoughts accumulated during this summer were featured in the &lt;a href=&quot;http://clojure-android.info/blog/&quot;&gt;blog&lt;/a&gt; under &amp;quot;gsoc&amp;quot; tag.&lt;/p&gt;

&lt;p&gt;Lean compilation is now tested to correctly compile Clojure, core.async and few small libraries. The easiest way to try it out is to use &lt;a href=&quot;https://github.com/alexander-yakushev/lein-skummet&quot;&gt;lein-skummet&lt;/a&gt; plugin as described &lt;a href=&quot;http://clojure-android.info/blog/2014/08/12/gsoc-2014-skummet-alpha1/&quot;&gt;here&lt;/a&gt;. The compiler was also trialled with Clojure on Android where it showed significant loading time improvements. The easy-to-use way of using lean compilation in CoA will follow soon with the release of the new lein-droid version (and will be announced in the blog).&lt;/p&gt;

&lt;p&gt;Additional resources: &lt;a href=&quot;https://github.com/ndr-qef/light-aleph&quot;&gt;README&lt;/a&gt;, &lt;a href=&quot;https://groups.google.com/forum/#!msg/light-table-discussion/gu5RvYS7j94/E7ozA7xJgPYJ&quot;&gt;announcement thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Student: Andrea Marchiori&lt;br&gt;
Project: &lt;a href=&quot;https://www.google-melange.com/gsoc/project/details/google/gsoc2014/ndr_qef/5757334940811264&quot;&gt;Aleph, a BOT browser and introspector for Light Table&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Light Table leverages the BOT architecture to create a platform designed around extensibility. In BOT, working components are defined by several elements. How these elements are combined, how they interact, and how they affect the application state is a source of complexity that makes BOT opaque. Aleph aims to make BOT accessible by providing a uniform interface for querying and recording state at runtime.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Student: Di Xu&lt;br&gt;
Project: &lt;a href=&quot;https://www.google-melange.com/gsoc/project/details/google/gsoc2014/xudifsd/5717271485874176&quot;&gt;Typed Clojure: Heterogeneous operations &amp;amp; Dotted Polymorphism&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I added two more function type to Typed Clojure, which can be used to annotate some built-in and/or user-defined functions like &lt;code&gt;assoc&lt;/code&gt; and &lt;code&gt;hash-map&lt;/code&gt;. Without those two types, type checking some custom variants accurately becomes impossible without hard-coding each variant into the type checker.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve written documentation under doc of my git tree, including document about &lt;a href=&quot;https://github.com/xudifsd/core.typed/blob/repeat-support/docs/infer-detail.md&quot;&gt;my implementation&lt;/a&gt;, and general &lt;a href=&quot;https://github.com/xudifsd/core.typed/blob/repeat-support/docs/tutorial-on-inference.md&quot;&gt;introduction&lt;/a&gt; of type inference used in Typed Clojure.&lt;/p&gt;

&lt;p&gt;I also published a &lt;a href=&quot;http://xudifsd.org/blog/2014/08/%E5%85%B3%E4%BA%8Etyped-clojure/&quot;&gt;blog post&lt;/a&gt; to introduce Typed Clojure in Chinese.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Student: Maksim Karandashov&lt;br&gt;
Project: &lt;a href=&quot;https://www.google-melange.com/gsoc/project/details/google/gsoc2014/norgat/5676830073815040&quot;&gt;Quil on ClojureScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quil is a library for creating animated sketches. It is based on a very popular Java library Processing. During this summer I&amp;#39;ve added ClojureScript support to Quil. I used cljx to make Quil crossplatform and Processing.js for ClojureScript version. Current version of Quil allows you to create a sketch that can be run on Clojure or ClojureScript without modifications (or even both using cljx). I&amp;#39;ve also created Processing.js &lt;a href=&quot;https://github.com/quil/processing-js/tree/master/resources/externs&quot;&gt;externs&lt;/a&gt; for Google Closure Compiler and Leiningen &lt;a href=&quot;https://github.com/quil/quil-templates&quot;&gt;templates&lt;/a&gt; for Quil (for Clojure and ClojureScript).&lt;/p&gt;

&lt;p&gt;For more information check Quil ClojureScript &lt;a href=&quot;https://github.com/quil/quil/wiki/ClojureScript&quot;&gt;wiki page&lt;/a&gt; and my &lt;a href=&quot;http://norgat.blogspot.ru/2014/06/alpha-version-of-quil-on-clojurescript.html&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Student: Minori Yamashita&lt;br&gt;
Project: &lt;a href=&quot;http://www.google-melange.com/gsoc/project/details/google/gsoc2014/ympbyc/5676830073815040&quot;&gt;Typed ClojureScript Library Annotations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I added core.typed annotations to cljs.core functions and made some changes to the checker to make them pass. I also started work on TypeScript d.ts to core.typed annotation transpiler and in order to do so I worked on a type called jsnominal to represent TypeScript interface.  I&amp;#39;m willing to continue working on this project but I gotta get myself sorted with the fall semester.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Student: Nicola Mometto&lt;br&gt;
Project: &lt;a href=&quot;http://www.google-melange.com/gsoc/project/details/google/gsoc2014/bronsa/5776756782923776&quot;&gt;tools.analyzer extensions: cljs port, documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During my GSOC I wrote the tools.analyzer.js contrib library, an analyzer for clojurescript code written on top of the tools.analyzer infrastructure. The advantages tools.analyzer.js has over the default clojurescript analyzer are: increased modularity, simpler implementation, pluggable extension points and an AST format compatible between all the tools.analyzer analyzers (tools.analyzer.jvm is the main one, but a tools.analyzer.clr port is being worked on by David Miller)
making it possible to write analyzer passes that are host agnostic and can work with every tools.analyzer analyzer.&lt;/p&gt;

&lt;p&gt;I also kept on working extensively on all my other contrib libraries, enhancing tools.emitter.jvm and tools.reader and reworking tools.analyzer and thus tools.analyzer.jvm to share as much code/infrastructure as possible with tools.analyzer.js and the AST format has been documented via an AST quickref that can be found in the README of each repo.&lt;/p&gt;

&lt;p&gt;I wrote a &lt;a href=&quot;https://groups.google.com/forum/#!searchin/clojure/tools.emitter.jvm/clojure/Mzakv8NHuO4/RsWeiBdvcz4J&quot;&gt;mail post&lt;/a&gt; describing in detail what has been going on for each project in the last months.&lt;/p&gt;

&lt;p&gt;Usage examples and a detailed changelog can be found in the readme of each repo: &lt;a href=&quot;https://github.com/clojure/tools.reader&quot;&gt;tools.reader&lt;/a&gt;, &lt;a href=&quot;https://github.com/clojure/tools.analyzer&quot;&gt;tools.analyzer&lt;/a&gt;, &lt;a href=&quot;https://github.com/clojure/tools.analyzer.jvm&quot;&gt;tools.analyzer.jvm&lt;/a&gt;, &lt;a href=&quot;https://github.com/clojure/tools.analyzer.js&quot;&gt;tools.analyzer.js&lt;/a&gt;, &lt;a href=&quot;https://github.com/clojure/tools.emitter.jvm&quot;&gt;tools.emitter.jvm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Student: Prasant Chidella&lt;br&gt;
Project: &lt;a href=&quot;http://www.google-melange.com/gsoc/project/details/google/gsoc2014/prasant94/5750085036015616&quot;&gt;Linear Algebra for Clojure – Adding linear algebra tools to core.matrix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I added some linear algebra functions like LU Decomposition, QR decomposition, SVD, least  squares, norm, rank etc. to vectorz which is a Linear algebra library in java. This is the backend for vectorz-clj, one of core.matrix&amp;#39;s implementations. These functions are very close to their counterparts in other java based libraries like EJML, jblas etc in terms of performance, with a lot of scope for optimizations. I also extended &lt;a href=&quot;https://code.google.com/p/java-matrix-benchmark/&quot;&gt;Java matrix benchmark&lt;/a&gt; to run benchmarks for vectorz against the many other libraries like ejml, jama, colt etc. That can be found here: https://github.com/prasant94/JavaMatrixBenchmark-for-Vectorz&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Student: Reid McKenzie&lt;br&gt;
Project: &lt;a href=&quot;http://www.google-melange.com/gsoc/project/details/google/gsoc2014/arrdem/5676830073815040&quot;&gt;Lean Clojure: An agressive compiler for lighter weight Clojure programs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my work on the Oxcart project, I implemented program loading infrastructure to generate a single datastructure representing an entire program and all loaded libraries. I then build analysis infrastructure for examining how definitions in a program are used if they are used and implemented an emitter which where possible would use static function invocation rather than var indirection. The last item I was working on when GSoC ended was AOT compiling all used clojure.core, library and program code to static classes which do not depend on clojure.lang.Compiler and a fork of the Clojure language which breaks the Clojure bootstrapping infrastructure appart from the datastructure libraries. The hope was that Oxcart would be able not only to statically AOT user programs but that by AOTing the Clojure standard library itself that all use of the standard Clojure compiler to generate dynamically linked non-AOT bytecode could be escaped.&lt;/p&gt;

&lt;p&gt;The future of the Oxcart project is uncertain at best, in that I am reluctant to commit to the hard fork of the Clojure language required to support the whole-program AOT work I was contemplating at the end of GSoC. However as whole program compilation of the type that Oxcart was designed for can only be approximated by lazy var loading optimizations and other techniques and as Oxcart demonstrated that speedups of 17-24% are possible using static linking I&amp;#39;m convinced that the Oxcart project itself was a worthwhile experiment forget a facinating summer.&lt;/p&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://github.com/oxlang/oxcart&quot;&gt;GitHub repo&lt;/a&gt;, &lt;a href=&quot;http://arrdem.com/2014/06/26/oxcart_and_clojure/&quot;&gt;blog post 1&lt;/a&gt;, &lt;a href=&quot;http://arrdem.com/2014/08/05/of_oxen,_carts_and_ordering/&quot;&gt;blog post 2&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Tue, 23 Sep 2014 00:00:00 -0700</pubDate>
      <link>http://nbeloglazov.com/2014/09/23/gsoc-results.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2014/09/23/gsoc-results.html</guid>
    </item>
    
    <item>
      <title>Equilibrium</title>
      <description>&lt;h3&gt;Let&amp;#39;s make chaos&lt;/h3&gt;

&lt;p&gt;Today I want to show you a neat chaos simulation. Rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;n points on a plane.&lt;/li&gt;
&lt;li&gt;Each point randomly selects two other points as its leaders.&lt;/li&gt;
&lt;li&gt;Each points tries to get to a position equidistant from both leaders.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example for 4 points:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/equilibrium/screenshot.png&quot; alt=&quot;Simulation screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;Green point has 2 leaders - red points. Red line is equidistance line. Green point&amp;#39;s goal is to get and stay on that line. All points have different leaders so movements appear pretty chaotic. Everything stabilizes after a while and we get equilibrium. Now the question: what will happen if you slightly move some point? How long will it take the system to get back into the equilibrium state?&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not so profficient in math to describe the system in sophisticated way, but I&amp;#39;m a programmer, so let&amp;#39;s write a simulation using Quil! Quil supports ClojureScript now so sketches can be embedded directly into the page. There will be no source code in this post, only playing with ready-to-use sketches. Link to the source code will be provided at the end of the post. Sketches are desktop-oriented so they probably won&amp;#39;t work propertly on mobiles.&lt;/p&gt;

&lt;h3&gt;First sketch&lt;/h3&gt;

&lt;p&gt;&lt;canvas id=&quot;first_sketch&quot; style=&quot;width: 500px; height: 500px;&quot;&gt;&lt;/canvas&gt;&lt;/p&gt;

&lt;p&gt;Hover th mouse over a point to see it leaders. You also can move a point by dragging it using mouse. Supported keybindings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;space - pause/continue;&lt;/li&gt;
&lt;li&gt;r - regenerate points;&lt;/li&gt;
&lt;li&gt;up and down arrows - increase/decrease number of points and regenerate points;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;#39;t forget to empirically get answers to the questions posed earlier. Also check how a configuration consisting only of 3 points always converges to a equilater triangle. Quite nice.&lt;/p&gt;

&lt;h3&gt;Second sketch&lt;/h3&gt;

&lt;p&gt;After a while the sketch becomes boring. To make it more dynamic we introduce constant velocity: each point, besides moving towards the equidistance line, also moves constantly in some direction. The direction is chosen randomly and speed is also random. Another change is to make the plane toroidal: if a point goes beyound the left boundary - it will appear on the right, beyound the bottom boundary - will appear on the top. Here is the second sketch that implements all these changes:&lt;/p&gt;

&lt;p&gt;&lt;canvas id=&quot;second_sketch&quot; style=&quot;width: 500px; height: 500px;&quot;&gt;&lt;/canvas&gt;&lt;/p&gt;

&lt;p&gt;Now we see eternal chaos: points moving around in futile attempt to achieve equilibrium.&lt;/p&gt;

&lt;h3&gt;Third sketch&lt;/h3&gt;

&lt;p&gt;Up to to now we&amp;#39;ve seen only points, dull black circles. How about adding tales for points? A tail is a k last positions of a point. And let&amp;#39;s make them colourful because black worms crowling chaotically around the screen is a depressing view. It is worms time:&lt;/p&gt;

&lt;p&gt;&lt;canvas id=&quot;third_sketch&quot; style=&quot;width: 500px; height: 500px;&quot;&gt;&lt;/canvas&gt;&lt;/p&gt;

&lt;p&gt;Use left and right arrows to change k - the number of points in tails. These keys work in previous skethes too, so you can turn points into worms there.&lt;/p&gt;

&lt;h3&gt;Where did the simulation come from?&lt;/h3&gt;

&lt;p&gt;I saw this simulation on a lecture about artificial intelligence. The simulation was performed on the audience: n people gathered in the center of the room, choosed leaders and started moving. After few minutes everyone finally stopped. Then the lecturer moved one person and everyone had to readjust their positions. It took another few minutes. The lecturer wanted to demonstrate that environment behaves in the same way: if you disbalance some part of it - the whole system will turn into unpredictable chaos. But our simulation shows the opposite: if you try to move a point - it comes back to original position pretty fast while all other points don’t move much. So in ideal conditions the equilibrium is pretty stable.&lt;/p&gt;

&lt;h3&gt;Implementation details&lt;/h3&gt;

&lt;p&gt;The implementation uses functional-mode middleware and all state updates are handled by Quil (look mom, no atoms!) Another nice thing is that the sketch is fully Clojure and ClojureScript compatible: if you name file equilibrium.clj - you can run in Clojure, rename to equilibrium.cljs, compile and it runs in browser, no change needed! But it&amp;#39;s not ideal. I like to work on a sketch in clojure, which supports live reloading and allows you to change parts of sketch without closing it, but in the end I target ClojureScript (so I can share it in post). It becomes tedious to constantly copy clj to cljs when you change anything and want to check it in browser. I ended up having weird combination of linux &lt;code&gt;watch&lt;/code&gt; command that copies clj to cljs every second and cljsbuild that autocompiles cljs to js. It works but looks ugly and scary. I wonder if it is possible to have a single file which is recognized by Clojure and ClojureScript. I know that I could use cljx for that, but seems quite heavy for such simple task. Or may be I just need to properly setup emacs/cider + cljx integration.&lt;/p&gt;

&lt;p&gt;Source code is available on &lt;a href=&quot;https://github.com/nbeloglazov/blog-projects/tree/master/equilibrium&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&quot;/scripts/equilibrium.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
    equilibrium.sketch({&quot;host&quot;: &quot;first_sketch&quot;, &quot;tail-size&quot;: 0});
    equilibrium.sketch({&quot;host&quot;: &quot;second_sketch&quot;, &quot;tail-size&quot;: 0, &quot;constant-velocity?&quot;: true, &quot;toroidal-board?&quot;: true});
    equilibrium.sketch({&quot;host&quot;: &quot;third_sketch&quot;, &quot;tail-size&quot;: 15, &quot;colourful?&quot;: true});
&lt;/script&gt;
</description>
      <pubDate>Tue, 09 Sep 2014 00:00:00 -0700</pubDate>
      <link>http://nbeloglazov.com/2014/09/09/equilibrium.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2014/09/09/equilibrium.html</guid>
    </item>
    
    <item>
      <title>Poor Man&#39;s Cljsfiddle</title>
      <description>&lt;h3&gt;Intro&lt;/h3&gt;

&lt;p&gt;In this post I&amp;#39;ll describe how to create poor man&amp;#39;s cljsfiddle in 4 steps. Rich man&amp;#39;s &lt;a href=&quot;http://cljsfiddle.net/&quot;&gt;cljsfiddle&lt;/a&gt; is a website similar to &lt;a href=&quot;http://jsfiddle.net/&quot;&gt;jsfiddle&lt;/a&gt; which allows you to try and test clojurescript snippets online. It was created by &lt;a href=&quot;https://github.com/jonase&quot;&gt;Jonas&lt;/a&gt; during &lt;a href=&quot;http://lispinsummerprojects.org/&quot;&gt;Lisp in Summer Projects&lt;/a&gt; (he took first place!). Cljsfiddle is pretty cool and I encourage you to try it out. But let&amp;#39;s get back to our own cljsfidle. Let&amp;#39;s call it cljsbin to avoid confusion. Cljsbin will have only 3 elements on a page: textarea for writing clojurescript, send button and iframe for running compiled cljs code. Minimalist design for the win!&lt;/p&gt;

&lt;p&gt;How it should work:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User puts clojurescript to the textarea code and clicks &amp;quot;Send&amp;quot;.&lt;/li&gt;
&lt;li&gt;A POST &lt;code&gt;/create&lt;/code&gt; request is sent. The request contains cljs source.&lt;/li&gt;
&lt;li&gt;The server receives the request, generates unique id for the new snippet, compiles the source and responds with the id.&lt;/li&gt;
&lt;li&gt;Upon receiving response browser extracts the id and sets &lt;code&gt;src&lt;/code&gt; attribute of the iframe to &lt;code&gt;/html/ID&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Iframe loads html file from the server. The file imports single script file: &lt;code&gt;/js/ID&lt;/code&gt;. The script contains compiled js which is executed inside the iframe.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Step 0 - Create Project&lt;/h3&gt;

&lt;p&gt;Project structure:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;├── project.clj
├── src
│   └── cljsbin.clj
└── public
    ├── index.html
    ├── script.js
    └── styles.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;project.clj:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defproject &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cljsbin&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.1.0-SNAPSHOT&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org.clojure/clojure&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.6.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compojure&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.1.8&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hiccup&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0.5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.3.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring/ring-json&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.3.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org.clojure/clojurescript&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.0-2268&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;me.raynes/fs&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.4.6&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Step 1 - Serve Static Siles&lt;/h3&gt;

&lt;p&gt;We start by creating a server that does only static files. The server will serve 3 static files: index.html, styles.css and script.js (we need a little bit of js to handle button click).&lt;/p&gt;

&lt;p&gt;cljsbin.clj:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cljsbin&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compojure.core&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;defroutes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compojure.route&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defroutes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; Serve index.html as initial page when user requests&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; http://localhost:8080/&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;slurp &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;public/index.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; Serve static files. By default &amp;#39;public&amp;#39; directory is used.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; Example: public/script.js served when user requests&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; http://localhost:8080/script.js&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;index.html:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Cljsbin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/script.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/styles.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;input-area&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;send&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Send&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;script.js:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Not implemented. Wait for the Step 2.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#send&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;a href=&quot;https://github.com/nbeloglazov/blog-projects/blob/master/cljsbin/public/styles.css&quot;&gt;this&lt;/a&gt; styles.css.&lt;/p&gt;

&lt;p&gt;Run server using jetty:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ring.adapter.jetty/run-jetty&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cljsbin/app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;, click button and check js console - you should see &amp;quot;Not implemented&amp;quot; message.&lt;/p&gt;

&lt;h3&gt;Step 2 - Serve Iframe Files&lt;/h3&gt;

&lt;p&gt;Time to serve html and js files which will be loaded by the iframe. Result js file will be static for now as we&amp;#39;re not sending code from the page.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cljsbin&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring.util.response&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hiccup.page&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; Create response for &amp;quot;/js/ID&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snippet-js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;console.log(&amp;#39;I am snippet &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resp/response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resp/content-type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; Create response for &amp;quot;/html/ID&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snippet-html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; Html structure is dead simple so it is easier to use hiccup here&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;; then load/update html template.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:head&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Snippet &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:script&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:src&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/js/&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}]]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;html5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defroutes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/js/:id&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;snippet-js&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/html/:id&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;snippet-html&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now reload the server and open &lt;a href=&quot;http://localhost:8080/html/42&quot;&gt;http://localhost:8080/html/42&lt;/a&gt;, you should see blank page and &amp;quot;I am snippet 42!&amp;quot; message in the js console.&lt;/p&gt;

&lt;h3&gt;Step 3 - Implement Send&lt;/h3&gt;

&lt;p&gt;We&amp;#39;re almost there! Let&amp;#39;s implement &lt;code&gt;/create&lt;/code&gt; request now and update js &lt;code&gt;send&lt;/code&gt; function. No cljs-&amp;gt;js compilation yet, just store source and serve it without modification. Format of request (json):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Some cljs code here.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And response (json):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update for cljsbin.clj:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cljsbin&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compojure.core&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:refer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;defroutes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring.middleware.json&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; Save all snippets in an atom. We could use db,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; but we&amp;#39;re doing poor&amp;#39;s man cljsfiddle after all.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Map structure: id -&amp;gt; js.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snippets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; Unique id generator.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next-id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swap!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; Implementation of &amp;quot;/create&amp;quot;.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Store source and return snippet id.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;create-snippet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swap!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;snippets&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;assoc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resp/response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; Updated snippet-js. Note that now it retrieves js from&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; the snippet atom instead of using static string.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snippet-js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;snippets&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resp/response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resp/content-type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defroutes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/create&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;create-snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; Use ring middleware to decode/encode json requests/response.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json/wrap-json-body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:keywords?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;json/wrap-json-response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update script.js:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#source&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/create&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/html/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#result&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m very sorry for using unholy javascript here instead of blessed clojurescript, but I couldn&amp;#39;t make myself setup all cljsbuild stuff for mere 16 lines of js. Now restart the server, but using &lt;code&gt;cljsbin/handler&lt;/code&gt; instead of &lt;code&gt;cljsbin/app&lt;/code&gt; this time. Open &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; and try to send following code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;I am alive!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see &amp;#39;I am alive!&amp;#39; message in the iframe on the right. We got poor&amp;#39;s man &lt;a href=&quot;http://jsfiddle.net&quot;&gt;jsfiddle&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;Step 4 - Clojurescript Compilation&lt;/h3&gt;

&lt;p&gt;Finally, the most interesting part - cljs-&amp;gt; js compilation. Let&amp;#39;s go straight to code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cljsbin&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cljs.closure&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cljs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;me.raynes.fs&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; Create temp dir where cljs will be compiled.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; It is used to speed up compilation: clojurescript compiler stores&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; intermediate results there. For example cljs.core and clojure.*&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; namespaces compiled to js. The directory is optional.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cljs-compilation-dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fs/temp-dir&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cljs-compilation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compile-cljs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; Clojurescript compiler prefers to work with files as&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;; input/outputs so we create temp files for the source&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;; and compiled output&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;source-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fs/temp-file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cljs-source&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;compiled-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fs/temp-file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cljs-compiled&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; Write source into the temp file.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source-file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; Compile source using :simple level of optimization.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cljs/build&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source-file&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:optimizations&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:simple&lt;/span&gt;
                 &lt;span class=&quot;ss&quot;&gt;:output-to&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getAbsolutePath&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;compiled-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;ss&quot;&gt;:output-dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getAbsolutePath&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cljs-compilation-dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;ss&quot;&gt;:pretty-print&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; Read compiled output and cleanup temp files.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compiled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;slurp &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compiled-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fs/delete&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fs/delete&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;compiled-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; Updated create-snippet&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;create-snippet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile-cljs&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swap!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;snippets&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;assoc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resp/response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart the server for the last time and try sending cljs code (you might need to wait a little while cljs is compiled):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hello&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;clojure.browser.dom&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;say-hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello from ClojureScript!&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/append&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.-body&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;js/document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.addEventListener&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;js/window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;load&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;say-hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enjoy greetings from clojurescript! Time to create an awesome promo video and launch Kickstarter campaign...&lt;/p&gt;

&lt;h3&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;We did simple cljsfiddle app in less than 60 lines of clojure code (and 16 lines of javascript), which is pretty cool, I think. Currently I&amp;#39;m working on cljsfiddle-kinda-clone for &lt;a href=&quot;https://github.com/quil/quil&quot;&gt;Quil&lt;/a&gt;: I want to create a website for sharing sketches written in Quil on ClojureScript. And that work inspired me to write this post. Nice thing about using clojurescript compiler is that it is very simple to add support for other cljs libraries when compiling cljs code: just include them into your &lt;code&gt;project.clj&lt;/code&gt; and compiler automatically discovers and compiles them.&lt;/p&gt;

&lt;p&gt;Cljs compilation consists of 2 major steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compile cljs files and their dependencies to separate js files.&lt;/li&gt;
&lt;li&gt;Compile js files to a single js file using &lt;a href=&quot;https://developers.google.com/closure/compiler/&quot;&gt;Google Closure Compiler&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I used &lt;code&gt;cljs.closure/build&lt;/code&gt; function which does both steps for me. Jonas in his cljsfiddle chose another way: he uses clojurescript compiler to perform only step 1 and then he does step 2 manually: &lt;a href=&quot;https://github.com/jonase/cljsfiddle/blob/9565ccf0d256fdbf97bf524dafb499ed470f32cc/src/clj/cljsfiddle/closure.clj#L33&quot;&gt;step 1&lt;/a&gt; and &lt;a href=&quot;https://github.com/jonase/cljsfiddle/blob/9565ccf0d256fdbf97bf524dafb499ed470f32cc/src/clj/cljsfiddle/closure.clj#L47&quot;&gt;step 2&lt;/a&gt;. It allows to perform compilation in memory - no need to use temp files. But it looks more complex. There are most likely other pros, would be glad to hear them.&lt;/p&gt;

&lt;p&gt;Code from this post is available on &lt;a href=&quot;https://github.com/nbeloglazov/blog-projects/tree/master/cljsbin&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Sat, 16 Aug 2014 22:00:00 -0700</pubDate>
      <link>http://nbeloglazov.com/2014/08/16/poor-mans-cljsfiddle.html</link>
      <guid isPermaLink="true">http://nbeloglazov.com/2014/08/16/poor-mans-cljsfiddle.html</guid>
    </item>
    
  </channel>
</rss>
